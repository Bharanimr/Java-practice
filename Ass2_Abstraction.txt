//Expected Understanding: Abstraction, Inheritance, Dynamic Binding, Polymorphism (Overriding), Constructor Overloading

public abstract class India 
{
	public abstract void speakLanguage();
	public abstract void eat();
	public abstract void dress();
	
	static String capital = "New Delhi";

	public India(String primeMinister)
	{
		System.out.println("Our Prime Minister is: " +primeMinister);
	}
}

//---------------------------------------------------------------------------------------------------


public abstract class SouthIndia extends India
{
	public SouthIndia(String primeMinister)
	{
		super(primeMinister);
	}

	public void cultivate()
	{
		System.out.println("Rice and Wheat cultivation");
	}
	
	puclic void livingStyle()
	{
		System.out.println("Average development");
	}
}

//----------------------------------------------------------------------------------------------------


public class TamilNadu extends SouthIndia
{
	static String capital = "Chennai";
	
	public TamilNadu(String primeMinister) 
	{
		super(primeMinister);
	}

	public static void main(String[] args) 
	{
        SouthIndia si = new TamilNadu("Modi");
        si.dress();
		si.eat();
		si.speakLanguage();
		si.livingStyle();
		si.cultivate();
		System.out.println("India capital is: " +India.capital);
		System.out.println("TamilNadu capital is: " +TamilNadu.capital);
		
	}

	@Override
	public void speakLanguage() 
	{
		System.out.println("Tamil");	
	}

	@Override
	public void eat() 
	{
		System.out.println("Briyani");	
	}

	@Override
	public void dress() 
	{
		System.out.println("Shirt Dhoti");		
	}
	public void cultivate()
	{
		System.out.println("Rice and Sugar cane cultivation");
	}
	public void livingstyle()
	{
		System.out.println("Above Average development");
	}

}
