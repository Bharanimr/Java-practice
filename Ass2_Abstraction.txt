//Expected Understanding: Abstraction, Inheritance, Dynamic Binding, Polymorphism (Overriding), Constructor Overloading

public abstract class India 
{
	abstract void speakLanguage();
	abstract void eat();
	abstract void dress();
	
	String capital = "New Delhi";

	public India(String primeMinister)
	{
		System.out.println("Our Prime Minister is: " +primeMinister);
	}
}

//---------------------------------------------------------------------------------------------------


public abstract class SouthIndia extends India
{
	public SouthIndia(String primeMinister)
	{
		super(primeMinister);
	}

	void cultivate()
	{
		System.out.println("Rice and Wheat cultivation");
	}
	
	void livingStyle()
	{
		System.out.println("Average development");
	}
}

//----------------------------------------------------------------------------------------------------


public class TamilNadu extends SouthIndia
{
	static String capital = "Chennai";
	
	public TamilNadu(String primeMinister) 
	{
		super(primeMinister);
	}

	public static void main(String[] args) 
	{
		India id = new TamilNadu("Modi");
		System.out.println("India capital is: " +id.capital);
		System.out.println("TamilNadu capital is: " +capital);
		
		SouthIndia si = new TamilNadu(capital);
	}

	@Override
	void speakLanguage() 
	{
		System.out.println("Tamil");	
	}

	@Override
	void eat() 
	{
		System.out.println("Briyani");	
	}

	@Override
	void dress() 
	{
		System.out.println("Shirt Dhoti");		
	}
	void cultivate()
	{
		System.out.println("Rice and Sugar cane cultivation");
	}
	void livingstyle()
	{
		System.out.println("Above Average development");
	}

}
